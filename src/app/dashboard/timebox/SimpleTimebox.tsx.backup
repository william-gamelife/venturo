'use client'

import { useState, useEffect } from 'react'
import { ModuleLayout } from '@/components/ModuleLayout'
import { Icons } from '@/components/icons'

interface TimeSlot {
  id: string
  activity?: string
  color?: string
  duration?: number
  groupId?: string
}

interface ActivityGroup {
  id: string
  name: string
  color: string
  startSlot: string
  duration: number // 分鐘
  day: number
  startHour: number
  startMinute: number
}

export default function SimpleTimebox() {
  const [timeUnit, setTimeUnit] = useState(30) // 30 或 60 分鐘
  const [timeSlots, setTimeSlots] = useState<Record<string, TimeSlot>>({})
  const [activityGroups, setActivityGroups] = useState<ActivityGroup[]>([])
  const [showAddDialog, setShowAddDialog] = useState(false)
  const [selectedSlot, setSelectedSlot] = useState<string | null>(null)
  
  // 新活動表單
  const [newActivity, setNewActivity] = useState({
    name: '',
    duration: 60,
    color: '#3b82f6'
  })

  // 生成時間格
  const generateTimeGrid = () => {
    const days = ['週一', '週二', '週三', '週四', '週五', '週六', '週日']
    const slots = []
    
    for (let hour = 6; hour <= 22; hour++) {
      if (timeUnit === 30) {
        slots.push({ hour, minute: 0, display: `${hour}:00` })
        if (hour < 22) {
          slots.push({ hour, minute: 30, display: `${hour}:30` })
        }
      } else {
        slots.push({ hour, minute: 0, display: `${hour}:00` })
      }
    }
    
    return { days, slots }
  }

  // 點擊時間格
  const handleSlotClick = (day: number, hour: number, minute: number) => {
    const slotId = `${day}_${hour}_${minute}`
    setSelectedSlot(slotId)
    setShowAddDialog(true)
  }

  // 新增活動
  const handleAddActivity = () => {
    if (!selectedSlot || !newActivity.name) return
    
    const [day, hour, minute] = selectedSlot.split('_').map(Number)
    const groupId = `activity_${Date.now()}`
    
    // 建立活動群組
    const newGroup: ActivityGroup = {
      id: groupId,
      name: newActivity.name,
      color: newActivity.color,
      startSlot: selectedSlot,
      duration: newActivity.duration,
      day,
      startHour: hour,
      startMinute: minute
    }
    
    // 填充時間格
    const slotsToFill = calculateSlots(day, hour, minute, newActivity.duration)
    const newTimeSlots = { ...timeSlots }
    
    slotsToFill.forEach(slotId => {
      newTimeSlots[slotId] = {
        id: slotId,
        activity: newActivity.name,
        color: newActivity.color,
        duration: newActivity.duration,
        groupId
      }
    })
    
    setTimeSlots(newTimeSlots)
    setActivityGroups([...activityGroups, newGroup])
    
    // 重置表單
    setShowAddDialog(false)
    setSelectedSlot(null)
    setNewActivity({ name: '', duration: 60, color: '#3b82f6' })
  }

  // 計算需要填充的時間格
  const calculateSlots = (day: number, startHour: number, startMinute: number, duration: number) => {
    const slots = []
    let currentMinutes = startHour * 60 + startMinute
    const endMinutes = currentMinutes + duration
    
    while (currentMinutes < endMinutes && currentMinutes <= 22 * 60) {
      const h = Math.floor(currentMinutes / 60)
      const m = currentMinutes % 60
      slots.push(`${day}_${h}_${m}`)
      currentMinutes += 30 // 永遠以30分鐘為單位
    }
    
    return slots
  }

  // 計算活動視覺位置
  const calculateActivityPosition = (group: ActivityGroup) => {
    const slotHeight = timeUnit === 30 ? 40 : 60
    const slotsPerHour = timeUnit === 30 ? 2 : 1
    
    // 計算起始位置
    const startIndex = (group.startHour - 6) * slotsPerHour + (group.startMinute / timeUnit)
    const topPosition = startIndex * slotHeight
    
    // 計算高度
    const slots = Math.ceil(group.duration / timeUnit)
    const height = slots * slotHeight
    
    return { top: topPosition, height }
  }

  const { days, slots } = generateTimeGrid()

  return (
    <ModuleLayout
      header={{
        icon: Icons.timebox,
        title: "時間盒",
        subtitle: "簡單的時間管理",
        actions: (
          <div className="unit-toggle">
            <button 
              className={timeUnit === 30 ? 'active' : ''}
              onClick={() => setTimeUnit(30)}
            >
              30分
            </button>
            <button 
              className={timeUnit === 60 ? 'active' : ''}
              onClick={() => setTimeUnit(60)}
            >
              60分
            </button>
          </div>
        )
      }}
    >
      <div className="simple-timebox">

      {/* 時間表格 */}
      <div className="timebox-grid">
        <div className="grid-header">
          <div className="time-header">時間</div>
          {days.map(day => (
            <div key={day} className="day-header">{day}</div>
          ))}
        </div>
        
        <div className="grid-body">
          {/* 時間標籤 */}
          <div className="time-labels">
            {slots.map(slot => (
              <div key={slot.display} className="time-label">
                {slot.display}
              </div>
            ))}
          </div>
          
          {/* 每天的欄位 */}
          {days.map((_, dayIndex) => (
            <div key={dayIndex} className="day-column">
              {/* 底層：可點擊的格子 */}
              <div className="slots-layer">
                {slots.map(slot => {
                  const slotId = `${dayIndex}_${slot.hour}_${slot.minute}`
                  const slotData = timeSlots[slotId]
                  
                  return (
                    <div
                      key={slotId}
                      className={`time-slot ${slotData ? 'occupied' : ''}`}
                      onClick={() => !slotData && handleSlotClick(dayIndex, slot.hour, slot.minute)}
                      style={{
                        background: slotData ? `${slotData.color}20` : 'transparent',
                        cursor: slotData ? 'default' : 'pointer'
                      }}
                    />
                  )
                })}
              </div>
              
              {/* 上層：活動視覺 */}
              <div className="activities-layer">
                {activityGroups
                  .filter(group => group.day === dayIndex)
                  .map(group => {
                    const position = calculateActivityPosition(group)
                    return (
                      <div
                        key={group.id}
                        className="activity-block"
                        style={{
                          top: `${position.top}px`,
                          height: `${position.height - 4}px`,
                          backgroundColor: group.color
                        }}
                        onClick={() => {
                          if (confirm(`刪除 ${group.name}？`)) {
                            // 刪除活動
                            const newTimeSlots = { ...timeSlots }
                            Object.keys(newTimeSlots).forEach(key => {
                              if (newTimeSlots[key].groupId === group.id) {
                                delete newTimeSlots[key]
                              }
                            })
                            setTimeSlots(newTimeSlots)
                            setActivityGroups(activityGroups.filter(g => g.id !== group.id))
                          }
                        }}
                      >
                        <div className="activity-name">{group.name}</div>
                        <div className="activity-duration">
                          {group.duration >= 60 
                            ? `${group.duration / 60}小時` 
                            : `${group.duration}分鐘`}
                        </div>
                      </div>
                    )
                  })}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* 新增活動對話框 */}
      {showAddDialog && (
        <div className="dialog-overlay" onClick={() => setShowAddDialog(false)}>
          <div className="dialog" onClick={e => e.stopPropagation()}>
            <h3>新增活動</h3>
            
            <div className="form-group">
              <label>活動名稱</label>
              <input
                type="text"
                value={newActivity.name}
                onChange={e => setNewActivity({...newActivity, name: e.target.value})}
                placeholder="例如：開會"
                autoFocus
              />
            </div>
            
            <div className="form-group">
              <label>持續時間</label>
              <select 
                value={newActivity.duration}
                onChange={e => setNewActivity({...newActivity, duration: Number(e.target.value)})}
              >
                <option value={30}>30分鐘</option>
                <option value={60}>1小時</option>
                <option value={90}>1.5小時</option>
                <option value={120}>2小時</option>
                <option value={180}>3小時</option>
                <option value={240}>4小時</option>
              </select>
            </div>
            
            <div className="form-group">
              <label>顏色</label>
              <div className="color-options">
                {['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899'].map(color => (
                  <button
                    key={color}
                    className={`color-btn ${newActivity.color === color ? 'active' : ''}`}
                    style={{ backgroundColor: color }}
                    onClick={() => setNewActivity({...newActivity, color})}
                  />
                ))}
              </div>
            </div>
            
            <div className="dialog-actions">
              <button onClick={() => setShowAddDialog(false)}>取消</button>
              <button onClick={handleAddActivity} disabled={!newActivity.name}>
                確定
              </button>
            </div>
          </div>
        </div>
      )}

      <style jsx>{`
        .simple-timebox {
          padding: 0;
        }

        .unit-toggle {
          display: flex;
          gap: 8px;
        }

        .unit-toggle button {
          padding: 6px 12px;
          border: 1px solid #ccc;
          background: white;
          border-radius: 6px;
          cursor: pointer;
        }

        .unit-toggle button.active {
          background: #3b82f6;
          color: white;
          border-color: #3b82f6;
        }

        .timebox-grid {
          background: white;
          border-radius: 12px;
          overflow: hidden;
          margin-top: 20px;
        }

        .grid-header {
          display: grid;
          grid-template-columns: 80px repeat(7, 1fr);
          background: #f5f5f5;
          border-bottom: 2px solid #ddd;
        }

        .time-header,
        .day-header {
          padding: 12px;
          font-weight: 600;
          text-align: center;
          border-right: 1px solid #ddd;
        }

        .grid-body {
          display: grid;
          grid-template-columns: 80px repeat(7, 1fr);
        }

        .time-labels {
          border-right: 2px solid #ddd;
        }

        .time-label {
          height: ${timeUnit === 30 ? '40px' : '60px'};
          display: flex;
          align-items: center;
          justify-content: center;
          border-bottom: 1px solid #eee;
          font-size: 12px;
          color: #666;
        }

        .day-column {
          position: relative;
          border-right: 1px solid #ddd;
        }

        .slots-layer {
          position: relative;
        }

        .time-slot {
          height: ${timeUnit === 30 ? '40px' : '60px'};
          border-bottom: 1px solid #eee;
          transition: background 0.2s;
        }

        .time-slot:hover:not(.occupied) {
          background: #f0f9ff !important;
        }

        .activities-layer {
          position: absolute;
          top: 0;
          left: 4px;
          right: 4px;
          pointer-events: none;
        }

        .activity-block {
          position: absolute;
          left: 0;
          right: 0;
          border-radius: 6px;
          padding: 4px 8px;
          color: white;
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: center;
          cursor: pointer;
          pointer-events: auto;
          transition: transform 0.2s;
        }

        .activity-block:hover {
          transform: scale(1.02);
          box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

        .activity-name {
          font-size: 12px;
          font-weight: 600;
        }

        .activity-duration {
          font-size: 10px;
          opacity: 0.9;
        }

        .dialog-overlay {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0,0,0,0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
        }

        .dialog {
          background: white;
          border-radius: 12px;
          padding: 24px;
          width: 90%;
          max-width: 400px;
        }

        .dialog h3 {
          margin: 0 0 20px 0;
        }

        .form-group {
          margin-bottom: 16px;
        }

        .form-group label {
          display: block;
          margin-bottom: 8px;
          font-weight: 500;
        }

        .form-group input,
        .form-group select {
          width: 100%;
          padding: 8px 12px;
          border: 1px solid #ddd;
          border-radius: 6px;
        }

        .color-options {
          display: flex;
          gap: 8px;
        }

        .color-btn {
          width: 32px;
          height: 32px;
          border-radius: 6px;
          border: 2px solid transparent;
          cursor: pointer;
        }

        .color-btn.active {
          border-color: #333;
        }

        .dialog-actions {
          display: flex;
          gap: 12px;
          justify-content: flex-end;
          margin-top: 24px;
        }

        .dialog-actions button {
          padding: 8px 20px;
          border-radius: 6px;
          border: none;
          cursor: pointer;
          font-weight: 500;
        }

        .dialog-actions button:first-child {
          background: #f5f5f5;
        }

        .dialog-actions button:last-child {
          background: #3b82f6;
          color: white;
        }

        .dialog-actions button:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
      `}</style>
      </div>
    </ModuleLayout>
  )
}