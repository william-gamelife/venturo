'use client'

import { useEffect, useState } from 'react'
import { useRouter, usePathname } from 'next/navigation'
import { useAuth } from '@/contexts/AuthContext'

interface DashboardLayoutProps {
  children: React.ReactNode
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  const { user, profile, loading, signOut } = useAuth()
  const router = useRouter()
  const pathname = usePathname()
  const [workMode, setWorkMode] = useState<'game' | 'corner'>('game')

  useEffect(() => {
    if (!loading && !user) {
      router.push('/auth/signin')
    }
  }, [loading, user, router])

  useEffect(() => {
    // 根據用戶角色設定初始模式
    if (profile) {
      if (profile.world_mode) {
        setWorkMode(profile.world_mode as 'game' | 'corner')
      }
      // 如果用戶沒有 Corner 權限，強制使用遊戲模式
      if (!hasCornerAccess(profile) && workMode === 'corner') {
        setWorkMode('game')
      }
    }
  }, [profile])

  const hasCornerAccess = (profile: any) => {
    if (!profile) return false
    return profile.role === 'SUPER_ADMIN' || profile.role === 'CORNER_EMPLOYEE'
  }
  
  const getUserRoleName = (role: string) => {
    switch(role) {
      case 'SUPER_ADMIN': return '超級管理員'
      case 'CORNER_EMPLOYEE': return '角落員工'
      case 'FRIEND': return '冒險者'
      default: return '用戶'
    }
  }

  const isActive = (href: string) => {
    if (href === '/dashboard') {
      return pathname === '/dashboard'
    }
    return pathname.startsWith(href)
  }

  const switchWorldMode = async (mode: 'game' | 'corner') => {
    if (!hasCornerAccess(profile) && mode === 'corner') {
      return
    }
    
    setWorkMode(mode)
    
    // 更新到資料庫
    if (profile) {
      const { supabase } = await import('@/lib/supabase/client')
      await supabase
        .from('profiles')
        .update({ world_mode: mode })
        .eq('id', profile.id)
    }
  }
  
  const gameMenuItems = [
    { href: '/dashboard', name: '系統總覽', icon: 'dashboard' },
    { href: '/dashboard/todos', name: '待辦事項', icon: 'todos' },
    { href: '/dashboard/calendar', name: '行事曆', icon: 'calendar' },
    { href: '/dashboard/timebox', name: '時間盒', icon: 'timebox' },
    { href: '/dashboard/projects', name: '專案管理', icon: 'projects' },
    { href: '/dashboard/mind-magic', name: '心靈魔法', icon: 'mind-magic' },
    { href: '/dashboard/monitoring', name: '監控中心', icon: 'monitoring' },
    { href: '/dashboard/settings', name: '系統設定', icon: 'settings' },
  ]

  const cornerMenuItems = [
    // 核心功能 (角落模式版本)  
    { href: '/dashboard/todos?mode=corner', name: '待辦事項', icon: 'todos', category: '核心' },
    { href: '/dashboard/projects', name: '專案管理', icon: 'projects', category: '核心' },
    
    // ERP 業務功能（保留框架）
    { href: '/dashboard/corner/quotes', name: '報價單管理', icon: 'quotes', category: 'ERP' },
    { href: '/dashboard/corner/orders', name: '訂單管理', icon: 'orders', category: 'ERP' },
    { href: '/dashboard/corner/customers', name: '客戶管理', icon: 'customers', category: 'ERP' },
    { href: '/dashboard/corner/suppliers', name: '供應商管理', icon: 'suppliers', category: 'ERP' },
  ]

  const menuItems = workMode === 'game' ? gameMenuItems : cornerMenuItems

  const getIcon = (iconType: string) => {
    const icons: Record<string, JSX.Element> = {
      dashboard: (
        <svg viewBox="0 0 24 24" fill="currentColor">
          <rect x="3" y="3" width="7" height="7"/>
          <rect x="14" y="3" width="7" height="7"/>
          <rect x="14" y="14" width="7" height="7"/>
          <rect x="3" y="14" width="7" height="7"/>
        </svg>
      ),
      todos: (
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <path d="M9 11l3 3L22 4"/>
          <path d="M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9c.39 0 .78.02 1.17.06"/>
        </svg>
      ),
      calendar: (
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
          <line x1="16" y1="2" x2="16" y2="6"/>
          <line x1="8" y1="2" x2="8" y2="6"/>
          <line x1="3" y1="10" x2="21" y2="10"/>
        </svg>
      ),
      timebox: (
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <circle cx="12" cy="12" r="10"/>
          <polyline points="12,6 12,12 16,14"/>
        </svg>
      ),
      projects: (
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"/>
        </svg>
      ),
      'mind-magic': (
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M12 2L15.09 8.26L22 9L17 14L18.18 21L12 17.27L5.82 21L7 14L2 9L8.91 8.26L12 2Z"/>
        </svg>
      ),
      monitoring: (
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <path d="M3 3v18h18"/>
          <path d="M7 16l4-4 4 4 6-6"/>
        </svg>
      ),
      settings: (
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <circle cx="12" cy="12" r="3"/>
          <path d="M12 1v6m0 6v6M21 12h-6M9 12H3"/>
        </svg>
      ),
      orders: (
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/>
          <rect x="8" y="2" width="8" height="4" rx="1" ry="1"/>
        </svg>
      ),
      quotes: (
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
        </svg>
      ),
      customers: (
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
          <circle cx="12" cy="7" r="4"/>
        </svg>
      ),
      suppliers: (
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/>
          <circle cx="9" cy="7" r="4"/>
          <path d="M22 21v-2a4 4 0 0 0-3-3.87"/>
          <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
        </svg>
      )
    }
    
    return icons[iconType] || icons.dashboard
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="loading-spinner"></div>
          <p className="mt-4 text-gray-600">載入中...</p>
        </div>
      </div>
    )
  }

  if (!user || !profile) {
    return null
  }

  return (
    <div className="dashboard-layout">
      {/* 側邊欄 */}
      <div className="sidebar">
        <div className="sidebar-logo">
          <div className="logo-icon">V</div>
          <div className="logo-text">VENTURO</div>
        </div>

        <nav className="flex-1 flex flex-col">
          {workMode === 'corner' ? (
            // Corner模式的分組選單
            <div className="corner-nav">
              <div className="nav-section">
                <div className="section-title">⚡ 核心功能</div>
                <ul className="nav-menu">
                  {cornerMenuItems.filter(item => item.category === '核心').map((item) => (
                    <li key={item.href} className="nav-item">
                      <a
                        href={item.href}
                        className={`nav-link ${isActive(item.href) ? 'active' : ''}`}
                        onClick={(e) => {
                          e.preventDefault()
                          router.push(item.href)
                        }}
                      >
                        <div className="nav-icon">{getIcon(item.icon)}</div>
                        <span>{item.name}</span>
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
              
              <div className="nav-section">
                <div className="section-title">🏢 ERP 系統</div>
                <ul className="nav-menu">
                  {cornerMenuItems.filter(item => item.category === 'ERP').map((item) => (
                    <li key={item.href} className="nav-item">
                      <a
                        href={item.href}
                        className={`nav-link ${isActive(item.href) ? 'active' : ''}`}
                        onClick={(e) => {
                          e.preventDefault()
                          router.push(item.href)
                        }}
                      >
                        <div className="nav-icon">{getIcon(item.icon)}</div>
                        <span>{item.name}</span>
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          ) : (
            // 遊戲模式的普通選單
            <ul className="nav-menu">
              {menuItems.map((item) => (
                <li key={item.href} className="nav-item">
                  <a
                    href={item.href}
                    className={`nav-link ${isActive(item.href) ? 'active' : ''}`}
                    onClick={(e) => {
                      e.preventDefault()
                      router.push(item.href)
                    }}
                  >
                    <div className="nav-icon">{getIcon(item.icon)}</div>
                    <span>{item.name}</span>
                  </a>
                </li>
              ))}
            </ul>
          )}
          
          {/* 底部區域 */}
          <div className="sidebar-bottom">
            {/* 工作模式切換器 */}
            {hasCornerAccess(profile) && (
              <div className="mode-switcher-bottom">
                <div className="sliding-toggle">
                  <div className="toggle-container">
                    <div className={`toggle-slider ${workMode === 'corner' ? 'slider-right' : 'slider-left'}`}></div>
                    <button
                      className={`toggle-option ${workMode === 'game' ? 'active' : ''}`}
                      onClick={() => switchWorldMode('game')}
                    >
                      <span>遊戲</span>
                      <span>模式</span>
                    </button>
                    <button
                      className={`toggle-option ${workMode === 'corner' ? 'active' : ''}`}
                      onClick={() => switchWorldMode('corner')}
                    >
                      <span>角落</span>
                      <span>模式</span>
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* 用戶資訊和登出按鈕 */}
            <div className="sidebar-footer">
              <div className="user-info-sidebar">
                <div className="user-name">{profile.display_name}</div>
                <div className="user-role">
                  {getUserRoleName(profile.role)}
                </div>
                <div className="user-stats">
                  <span>Lv.{profile.level}</span>
                  <span>💰 {profile.coins}</span>
                </div>
              </div>
              <button className="logout-btn-sidebar" onClick={signOut}>
                <svg viewBox="0 0 24 24" width="16" height="16" fill="currentColor">
                  <path d="M16 17l5-5-5-5v3H9v4h7v3z"/>
                  <path d="M2 2h7v2H4v16h5v2H2V2z"/>
                </svg>
                登出
              </button>
            </div>
          </div>
        </nav>
      </div>

      {/* 主要內容區域 */}
      <div className="main-content">
        <div className="module-container">
          {children}
        </div>
      </div>

      <style jsx>{`
        .dashboard-layout {
          display: flex;
          min-height: 100vh;
          background: linear-gradient(135deg, #f4f1eb 0%, #e8e2d5 100%);
        }

        .sidebar {
          position: fixed;
          left: 0;
          top: 0;
          width: 200px;
          height: 100vh;
          background: rgba(255, 253, 250, 0.9);
          backdrop-filter: blur(20px);
          padding: 24px 20px;
          border-right: 1px solid rgba(201, 169, 97, 0.2);
          display: flex;
          flex-direction: column;
          z-index: 1000;
        }

        .sidebar-logo {
          display: flex;
          align-items: center;
          gap: 12px;
          margin-bottom: 32px;
        }

        .logo-icon {
          width: 32px;
          height: 32px;
          background: linear-gradient(135deg, #c9a961, #7a8b74);
          border-radius: 10px;
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
          font-weight: 700;
        }

        .logo-text {
          font-size: 18px;
          font-weight: 600;
          color: #3a3833;
        }

        .corner-nav {
          display: flex;
          flex-direction: column;
          gap: 20px;
        }

        .nav-section {
          margin-bottom: 8px;
        }

        .section-title {
          font-size: 11px;
          font-weight: 700;
          color: #8b7355;
          text-transform: uppercase;
          letter-spacing: 1px;
          margin-bottom: 12px;
          padding: 0 16px;
          opacity: 0.8;
        }

        .nav-menu {
          list-style: none;
          padding: 0;
          margin: 0;
        }

        .nav-item {
          margin-bottom: 4px;
        }

        .nav-link {
          display: flex;
          align-items: center;
          gap: 12px;
          padding: 12px 16px;
          text-decoration: none;
          color: #6d685f;
          border-radius: 12px;
          transition: all 0.2s ease;
          cursor: pointer;
        }

        .nav-link:hover {
          background: rgba(201, 169, 97, 0.1);
          color: #3a3833;
        }

        .nav-link.active {
          background: rgba(201, 169, 97, 0.2);
          color: #8b7355;
          font-weight: 500;
        }

        .nav-icon {
          width: 20px;
          height: 20px;
          flex-shrink: 0;
        }

        .nav-icon svg {
          width: 100%;
          height: 100%;
        }

        .sidebar-bottom {
          margin-top: auto;
        }

        .mode-switcher-bottom {
          margin-bottom: 12px;
          padding: 0 16px;
        }

        .sliding-toggle {
          display: flex;
          justify-content: center;
        }

        .toggle-container {
          position: relative;
          display: flex;
          background: rgba(201, 169, 97, 0.1);
          border-radius: 12px;
          padding: 3px;
          width: 100%;
          max-width: 180px;
        }

        .toggle-slider {
          position: absolute;
          top: 3px;
          left: 3px;
          width: calc(50% - 3px);
          height: calc(100% - 6px);
          background: linear-gradient(135deg, #c9a961, #b8985a);
          border-radius: 9px;
          transition: transform 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
          box-shadow: 0 2px 8px rgba(201, 169, 97, 0.3);
        }

        .slider-left {
          transform: translateX(0);
        }

        .slider-right {
          transform: translateX(100%);
        }

        .toggle-option {
          flex: 1;
          padding: 6px 8px;
          background: transparent;
          border: none;
          font-size: 10px;
          font-weight: 500;
          cursor: pointer;
          transition: color 0.3s ease;
          position: relative;
          z-index: 1;
          color: #8b7355;
          display: flex;
          flex-direction: column;
          align-items: center;
          gap: 1px;
          line-height: 1.1;
        }

        .toggle-option.active {
          color: white;
        }

        .toggle-option:not(.active) {
          color: #6d685f;
        }

        .sidebar-footer {
          border-top: 1px solid rgba(201, 169, 97, 0.2);
          padding-top: 16px;
        }

        .user-info-sidebar {
          text-align: center;
          margin-bottom: 12px;
        }

        .user-name {
          font-weight: 600;
          color: #3a3833;
          font-size: 14px;
          margin-bottom: 4px;
        }

        .user-role {
          color: #6d685f;
          font-size: 12px;
          margin-bottom: 8px;
        }

        .user-stats {
          display: flex;
          justify-content: center;
          gap: 16px;
          font-size: 12px;
          color: #8b7355;
        }

        .logout-btn-sidebar {
          width: 100%;
          padding: 10px;
          background: linear-gradient(135deg, #c9a961, #b8985a);
          color: white;
          border: none;
          border-radius: 10px;
          cursor: pointer;
          font-weight: 500;
          font-size: 13px;
          transition: all 0.2s ease;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
        }

        .logout-btn-sidebar:hover {
          background: linear-gradient(135deg, #8b7355, #7a6449);
          transform: translateY(-1px);
          box-shadow: 0 4px 12px rgba(201, 169, 97, 0.3);
        }

        .main-content {
          margin-left: 200px;
          min-height: 100vh;
          display: flex;
          flex-direction: column;
          flex: 1;
        }

        .module-container {
          flex: 1;
          padding: 24px 40px;
          background: transparent;
        }

        .loading-spinner {
          width: 32px;
          height: 32px;
          border: 3px solid #e4d4a8;
          border-radius: 50%;
          border-top-color: #c9a961;
          animation: spin 1s linear infinite;
          margin: 0 auto;
        }

        @keyframes spin {
          to { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  )
}